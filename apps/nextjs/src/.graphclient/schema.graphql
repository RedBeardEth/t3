schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

type Query {
  l2deposits(first: Int = 100, skip: Int = 0, orderBy: String = null, orderByDirection: String = "asc", where: WhereFilterForTransaction = null): [L2Deposit!]!
  deposit(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Deposit
  l2withdrawals(first: Int = 100, skip: Int = 0, orderBy: String = null, orderByDirection: String = "asc", where: WhereFilterForWithdrawals = null): [L2Withdrawal!]!
  beasts(first: Int = 100, skip: Int = 0, orderBy: String = null, orderByDirection: String = "asc", where: WhereFilterForBeasts = null): [Beast!]!
  depositEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): DepositEvent
  depositEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: DepositEvent_orderBy
    orderDirection: OrderDirection
    where: DepositEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [DepositEvent!]!
  deposits(
    skip: Int = 0
    first: Int = 100
    orderBy: Deposit_orderBy
    orderDirection: OrderDirection
    where: Deposit_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Deposit!]!
  withdrawalEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): WithdrawalEvent
  withdrawalEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: WithdrawalEvent_orderBy
    orderDirection: OrderDirection
    where: WithdrawalEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [WithdrawalEvent!]!
  withdrawal(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Withdrawal
  withdrawals(
    skip: Int = 0
    first: Int = 100
    orderBy: Withdrawal_orderBy
    orderDirection: OrderDirection
    where: Withdrawal_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Withdrawal!]!
  token(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Token
  tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Token_orderBy
    orderDirection: OrderDirection
    where: Token_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Token!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
  resource(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Resource
  resources(
    skip: Int = 0
    first: Int = 100
    orderBy: Resource_orderBy
    orderDirection: OrderDirection
    where: Resource_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Resource!]!
  realm(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Realm
  realms(
    skip: Int = 0
    first: Int = 100
    orderBy: Realm_orderBy
    orderDirection: OrderDirection
    where: Realm_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Realm!]!
  realmResource(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RealmResource
  realmResources(
    skip: Int = 0
    first: Int = 100
    orderBy: RealmResource_orderBy
    orderDirection: OrderDirection
    where: RealmResource_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [RealmResource!]!
  wallet(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Wallet
  wallets(
    skip: Int = 0
    first: Int = 100
    orderBy: Wallet_orderBy
    orderDirection: OrderDirection
    where: Wallet_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Wallet!]!
  transfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Transfer
  transfers(
    skip: Int = 0
    first: Int = 100
    orderBy: Transfer_orderBy
    orderDirection: OrderDirection
    where: Transfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Transfer!]!
}

type L2Deposit {
  id: String!
  l2Recipient: String!
  amount: Decimal!
  timestamp: DateTime!
  hash: String!
}

"""Decimal (fixed-point)"""
scalar Decimal

"""Date with time (isoformat)"""
scalar DateTime

input WhereFilterForTransaction {
  id: String = null
  l2Recipient: String = null
}

type L2Withdrawal {
  id: String!
  l1Recipient: String!
  l2Sender: String!
  amount: Decimal!
  timestamp: DateTime!
  hash: String!
}

input WhereFilterForWithdrawals {
  id: String = null
  l2Sender: String = null
}

type Beast {
  id: String!
  name: String
  image: String
  level: String
  tier: String
  prefix: String
  suffix: String
  owner: String!
}

input WhereFilterForBeasts {
  id: String = null
  owner: String = null
}

type Subscription {
  depositEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): DepositEvent
  depositEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: DepositEvent_orderBy
    orderDirection: OrderDirection
    where: DepositEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [DepositEvent!]!
  deposit(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Deposit
  deposits(
    skip: Int = 0
    first: Int = 100
    orderBy: Deposit_orderBy
    orderDirection: OrderDirection
    where: Deposit_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Deposit!]!
  withdrawalEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): WithdrawalEvent
  withdrawalEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: WithdrawalEvent_orderBy
    orderDirection: OrderDirection
    where: WithdrawalEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [WithdrawalEvent!]!
  withdrawal(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Withdrawal
  withdrawals(
    skip: Int = 0
    first: Int = 100
    orderBy: Withdrawal_orderBy
    orderDirection: OrderDirection
    where: Withdrawal_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Withdrawal!]!
  token(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Token
  tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Token_orderBy
    orderDirection: OrderDirection
    where: Token_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Token!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
  resource(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Resource
  resources(
    skip: Int = 0
    first: Int = 100
    orderBy: Resource_orderBy
    orderDirection: OrderDirection
    where: Resource_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Resource!]!
  realm(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Realm
  realms(
    skip: Int = 0
    first: Int = 100
    orderBy: Realm_orderBy
    orderDirection: OrderDirection
    where: Realm_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Realm!]!
  realmResource(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RealmResource
  realmResources(
    skip: Int = 0
    first: Int = 100
    orderBy: RealmResource_orderBy
    orderDirection: OrderDirection
    where: RealmResource_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [RealmResource!]!
  wallet(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Wallet
  wallets(
    skip: Int = 0
    first: Int = 100
    orderBy: Wallet_orderBy
    orderDirection: OrderDirection
    where: Wallet_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Wallet!]!
  transfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Transfer
  transfers(
    skip: Int = 0
    first: Int = 100
    orderBy: Transfer_orderBy
    orderDirection: OrderDirection
    where: Transfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Transfer!]!
}

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

type Deposit {
  """[bridgeL1Address, ...payload].join('-')"""
  id: ID!
  depositEvents(skip: Int = 0, first: Int = 100, orderBy: DepositEvent_orderBy, orderDirection: OrderDirection, where: DepositEvent_filter): [DepositEvent!]!
  l1Sender: Bytes!
  l2Recipient: Bytes!
  createdTimestamp: BigInt
}

type DepositEvent {
  """uniq ID"""
  id: ID!
  bridgeAddressL1: Bytes!
  bridgeAddressL2: Bytes!
  amount: BigInt!
  status: TransferStatus!
  payload: [BigInt!]
  nonce: BigInt
  createdAtBlock: BigInt!
  createdTxHash: Bytes!
  finishedAtBlock: BigInt
  finishedAtDate: BigInt
  finishedTxHash: Bytes
}

input DepositEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  bridgeAddressL1: Bytes
  bridgeAddressL1_not: Bytes
  bridgeAddressL1_gt: Bytes
  bridgeAddressL1_lt: Bytes
  bridgeAddressL1_gte: Bytes
  bridgeAddressL1_lte: Bytes
  bridgeAddressL1_in: [Bytes!]
  bridgeAddressL1_not_in: [Bytes!]
  bridgeAddressL1_contains: Bytes
  bridgeAddressL1_not_contains: Bytes
  bridgeAddressL2: Bytes
  bridgeAddressL2_not: Bytes
  bridgeAddressL2_gt: Bytes
  bridgeAddressL2_lt: Bytes
  bridgeAddressL2_gte: Bytes
  bridgeAddressL2_lte: Bytes
  bridgeAddressL2_in: [Bytes!]
  bridgeAddressL2_not_in: [Bytes!]
  bridgeAddressL2_contains: Bytes
  bridgeAddressL2_not_contains: Bytes
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  status: TransferStatus
  status_not: TransferStatus
  status_in: [TransferStatus!]
  status_not_in: [TransferStatus!]
  payload: [BigInt!]
  payload_not: [BigInt!]
  payload_contains: [BigInt!]
  payload_contains_nocase: [BigInt!]
  payload_not_contains: [BigInt!]
  payload_not_contains_nocase: [BigInt!]
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  createdAtBlock: BigInt
  createdAtBlock_not: BigInt
  createdAtBlock_gt: BigInt
  createdAtBlock_lt: BigInt
  createdAtBlock_gte: BigInt
  createdAtBlock_lte: BigInt
  createdAtBlock_in: [BigInt!]
  createdAtBlock_not_in: [BigInt!]
  createdTxHash: Bytes
  createdTxHash_not: Bytes
  createdTxHash_gt: Bytes
  createdTxHash_lt: Bytes
  createdTxHash_gte: Bytes
  createdTxHash_lte: Bytes
  createdTxHash_in: [Bytes!]
  createdTxHash_not_in: [Bytes!]
  createdTxHash_contains: Bytes
  createdTxHash_not_contains: Bytes
  finishedAtBlock: BigInt
  finishedAtBlock_not: BigInt
  finishedAtBlock_gt: BigInt
  finishedAtBlock_lt: BigInt
  finishedAtBlock_gte: BigInt
  finishedAtBlock_lte: BigInt
  finishedAtBlock_in: [BigInt!]
  finishedAtBlock_not_in: [BigInt!]
  finishedAtDate: BigInt
  finishedAtDate_not: BigInt
  finishedAtDate_gt: BigInt
  finishedAtDate_lt: BigInt
  finishedAtDate_gte: BigInt
  finishedAtDate_lte: BigInt
  finishedAtDate_in: [BigInt!]
  finishedAtDate_not_in: [BigInt!]
  finishedTxHash: Bytes
  finishedTxHash_not: Bytes
  finishedTxHash_gt: Bytes
  finishedTxHash_lt: Bytes
  finishedTxHash_gte: Bytes
  finishedTxHash_lte: Bytes
  finishedTxHash_in: [Bytes!]
  finishedTxHash_not_in: [Bytes!]
  finishedTxHash_contains: Bytes
  finishedTxHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [DepositEvent_filter]
  or: [DepositEvent_filter]
}

enum DepositEvent_orderBy {
  id
  bridgeAddressL1
  bridgeAddressL2
  amount
  status
  payload
  nonce
  createdAtBlock
  createdTxHash
  finishedAtBlock
  finishedAtDate
  finishedTxHash
}

input Deposit_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  depositEvents: [String!]
  depositEvents_not: [String!]
  depositEvents_contains: [String!]
  depositEvents_contains_nocase: [String!]
  depositEvents_not_contains: [String!]
  depositEvents_not_contains_nocase: [String!]
  depositEvents_: DepositEvent_filter
  l1Sender: Bytes
  l1Sender_not: Bytes
  l1Sender_gt: Bytes
  l1Sender_lt: Bytes
  l1Sender_gte: Bytes
  l1Sender_lte: Bytes
  l1Sender_in: [Bytes!]
  l1Sender_not_in: [Bytes!]
  l1Sender_contains: Bytes
  l1Sender_not_contains: Bytes
  l2Recipient: Bytes
  l2Recipient_not: Bytes
  l2Recipient_gt: Bytes
  l2Recipient_lt: Bytes
  l2Recipient_gte: Bytes
  l2Recipient_lte: Bytes
  l2Recipient_in: [Bytes!]
  l2Recipient_not_in: [Bytes!]
  l2Recipient_contains: Bytes
  l2Recipient_not_contains: Bytes
  createdTimestamp: BigInt
  createdTimestamp_not: BigInt
  createdTimestamp_gt: BigInt
  createdTimestamp_lt: BigInt
  createdTimestamp_gte: BigInt
  createdTimestamp_lte: BigInt
  createdTimestamp_in: [BigInt!]
  createdTimestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Deposit_filter]
  or: [Deposit_filter]
}

enum Deposit_orderBy {
  id
  depositEvents
  l1Sender
  l2Recipient
  createdTimestamp
}

"""
8 bytes signed integer

"""
scalar Int8

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Token {
  """address"""
  id: ID!
  name: String!
  symbol: String!
  decimals: Int!
}

input Token_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  decimals: Int
  decimals_not: Int
  decimals_gt: Int
  decimals_lt: Int
  decimals_gte: Int
  decimals_lte: Int
  decimals_in: [Int!]
  decimals_not_in: [Int!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Token_filter]
  or: [Token_filter]
}

enum Token_orderBy {
  id
  name
  symbol
  decimals
}

enum TransferStatus {
  PENDING
  FINISHED
  ACCEPTED_ON_L1
  ACCEPTED_ON_L2
}

type Withdrawal {
  """[bridgeL1Address, ...payload].join('-')"""
  id: ID!
  l1Recipient: Bytes!
  l2Sender: Bytes!
  createdTimestamp: BigInt
  withdrawalEvents(skip: Int = 0, first: Int = 100, orderBy: WithdrawalEvent_orderBy, orderDirection: OrderDirection, where: WithdrawalEvent_filter): [WithdrawalEvent!]!
}

type WithdrawalEvent {
  """uniq ID"""
  id: ID!
  bridgeAddressL1: Bytes!
  bridgeAddressL2: Bytes!
  l1Recipient: Bytes!
  amount: BigInt!
  status: TransferStatus!
  createdAtBlock: BigInt!
  createdTxHash: Bytes!
  finishedAtBlock: BigInt
  finishedAtDate: BigInt
  finishedTxHash: Bytes
}

input WithdrawalEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  bridgeAddressL1: Bytes
  bridgeAddressL1_not: Bytes
  bridgeAddressL1_gt: Bytes
  bridgeAddressL1_lt: Bytes
  bridgeAddressL1_gte: Bytes
  bridgeAddressL1_lte: Bytes
  bridgeAddressL1_in: [Bytes!]
  bridgeAddressL1_not_in: [Bytes!]
  bridgeAddressL1_contains: Bytes
  bridgeAddressL1_not_contains: Bytes
  bridgeAddressL2: Bytes
  bridgeAddressL2_not: Bytes
  bridgeAddressL2_gt: Bytes
  bridgeAddressL2_lt: Bytes
  bridgeAddressL2_gte: Bytes
  bridgeAddressL2_lte: Bytes
  bridgeAddressL2_in: [Bytes!]
  bridgeAddressL2_not_in: [Bytes!]
  bridgeAddressL2_contains: Bytes
  bridgeAddressL2_not_contains: Bytes
  l1Recipient: Bytes
  l1Recipient_not: Bytes
  l1Recipient_gt: Bytes
  l1Recipient_lt: Bytes
  l1Recipient_gte: Bytes
  l1Recipient_lte: Bytes
  l1Recipient_in: [Bytes!]
  l1Recipient_not_in: [Bytes!]
  l1Recipient_contains: Bytes
  l1Recipient_not_contains: Bytes
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  status: TransferStatus
  status_not: TransferStatus
  status_in: [TransferStatus!]
  status_not_in: [TransferStatus!]
  createdAtBlock: BigInt
  createdAtBlock_not: BigInt
  createdAtBlock_gt: BigInt
  createdAtBlock_lt: BigInt
  createdAtBlock_gte: BigInt
  createdAtBlock_lte: BigInt
  createdAtBlock_in: [BigInt!]
  createdAtBlock_not_in: [BigInt!]
  createdTxHash: Bytes
  createdTxHash_not: Bytes
  createdTxHash_gt: Bytes
  createdTxHash_lt: Bytes
  createdTxHash_gte: Bytes
  createdTxHash_lte: Bytes
  createdTxHash_in: [Bytes!]
  createdTxHash_not_in: [Bytes!]
  createdTxHash_contains: Bytes
  createdTxHash_not_contains: Bytes
  finishedAtBlock: BigInt
  finishedAtBlock_not: BigInt
  finishedAtBlock_gt: BigInt
  finishedAtBlock_lt: BigInt
  finishedAtBlock_gte: BigInt
  finishedAtBlock_lte: BigInt
  finishedAtBlock_in: [BigInt!]
  finishedAtBlock_not_in: [BigInt!]
  finishedAtDate: BigInt
  finishedAtDate_not: BigInt
  finishedAtDate_gt: BigInt
  finishedAtDate_lt: BigInt
  finishedAtDate_gte: BigInt
  finishedAtDate_lte: BigInt
  finishedAtDate_in: [BigInt!]
  finishedAtDate_not_in: [BigInt!]
  finishedTxHash: Bytes
  finishedTxHash_not: Bytes
  finishedTxHash_gt: Bytes
  finishedTxHash_lt: Bytes
  finishedTxHash_gte: Bytes
  finishedTxHash_lte: Bytes
  finishedTxHash_in: [Bytes!]
  finishedTxHash_not_in: [Bytes!]
  finishedTxHash_contains: Bytes
  finishedTxHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [WithdrawalEvent_filter]
  or: [WithdrawalEvent_filter]
}

enum WithdrawalEvent_orderBy {
  id
  bridgeAddressL1
  bridgeAddressL2
  l1Recipient
  amount
  status
  createdAtBlock
  createdTxHash
  finishedAtBlock
  finishedAtDate
  finishedTxHash
}

input Withdrawal_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  l1Recipient: Bytes
  l1Recipient_not: Bytes
  l1Recipient_gt: Bytes
  l1Recipient_lt: Bytes
  l1Recipient_gte: Bytes
  l1Recipient_lte: Bytes
  l1Recipient_in: [Bytes!]
  l1Recipient_not_in: [Bytes!]
  l1Recipient_contains: Bytes
  l1Recipient_not_contains: Bytes
  l2Sender: Bytes
  l2Sender_not: Bytes
  l2Sender_gt: Bytes
  l2Sender_lt: Bytes
  l2Sender_gte: Bytes
  l2Sender_lte: Bytes
  l2Sender_in: [Bytes!]
  l2Sender_not_in: [Bytes!]
  l2Sender_contains: Bytes
  l2Sender_not_contains: Bytes
  createdTimestamp: BigInt
  createdTimestamp_not: BigInt
  createdTimestamp_gt: BigInt
  createdTimestamp_lt: BigInt
  createdTimestamp_gte: BigInt
  createdTimestamp_lte: BigInt
  createdTimestamp_in: [BigInt!]
  createdTimestamp_not_in: [BigInt!]
  withdrawalEvents: [String!]
  withdrawalEvents_not: [String!]
  withdrawalEvents_contains: [String!]
  withdrawalEvents_contains_nocase: [String!]
  withdrawalEvents_not_contains: [String!]
  withdrawalEvents_not_contains_nocase: [String!]
  withdrawalEvents_: WithdrawalEvent_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Withdrawal_filter]
  or: [Withdrawal_filter]
}

enum Withdrawal_orderBy {
  id
  l1Recipient
  l2Sender
  createdTimestamp
  withdrawalEvents
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}

type Realm {
  id: ID!
  tokenId: Int!
  currentOwner: Wallet!
  minted: BigInt!
  name: String
  cities: Int!
  harbours: Int!
  rivers: Int!
  regions: Int!
  resourceIds: [Int!]!
  resources(skip: Int = 0, first: Int = 100, orderBy: RealmResource_orderBy, orderDirection: OrderDirection, where: RealmResource_filter): [RealmResource!]
  wonder: String
  rarityScore: BigDecimal!
  rarityRank: BigInt!
  order: String
  bridgedOwner: Wallet
  bridgedV2Owner: Wallet
}

type RealmResource {
  id: ID!
  realm: Realm!
  resource: Resource!
}

input RealmResource_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  realm: String
  realm_not: String
  realm_gt: String
  realm_lt: String
  realm_gte: String
  realm_lte: String
  realm_in: [String!]
  realm_not_in: [String!]
  realm_contains: String
  realm_contains_nocase: String
  realm_not_contains: String
  realm_not_contains_nocase: String
  realm_starts_with: String
  realm_starts_with_nocase: String
  realm_not_starts_with: String
  realm_not_starts_with_nocase: String
  realm_ends_with: String
  realm_ends_with_nocase: String
  realm_not_ends_with: String
  realm_not_ends_with_nocase: String
  realm_: Realm_filter
  resource: String
  resource_not: String
  resource_gt: String
  resource_lt: String
  resource_gte: String
  resource_lte: String
  resource_in: [String!]
  resource_not_in: [String!]
  resource_contains: String
  resource_contains_nocase: String
  resource_not_contains: String
  resource_not_contains_nocase: String
  resource_starts_with: String
  resource_starts_with_nocase: String
  resource_not_starts_with: String
  resource_not_starts_with_nocase: String
  resource_ends_with: String
  resource_ends_with_nocase: String
  resource_not_ends_with: String
  resource_not_ends_with_nocase: String
  resource_: Resource_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [RealmResource_filter]
  or: [RealmResource_filter]
}

enum RealmResource_orderBy {
  id
  realm
  realm__id
  realm__tokenId
  realm__minted
  realm__name
  realm__cities
  realm__harbours
  realm__rivers
  realm__regions
  realm__wonder
  realm__rarityScore
  realm__rarityRank
  realm__order
  resource
  resource__id
  resource__name
  resource__totalRealms
}

enum RealmTraitOption {
  regions
  cities
  harbors
  rivers
}

input Realm_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  tokenId: Int
  tokenId_not: Int
  tokenId_gt: Int
  tokenId_lt: Int
  tokenId_gte: Int
  tokenId_lte: Int
  tokenId_in: [Int!]
  tokenId_not_in: [Int!]
  currentOwner: String
  currentOwner_not: String
  currentOwner_gt: String
  currentOwner_lt: String
  currentOwner_gte: String
  currentOwner_lte: String
  currentOwner_in: [String!]
  currentOwner_not_in: [String!]
  currentOwner_contains: String
  currentOwner_contains_nocase: String
  currentOwner_not_contains: String
  currentOwner_not_contains_nocase: String
  currentOwner_starts_with: String
  currentOwner_starts_with_nocase: String
  currentOwner_not_starts_with: String
  currentOwner_not_starts_with_nocase: String
  currentOwner_ends_with: String
  currentOwner_ends_with_nocase: String
  currentOwner_not_ends_with: String
  currentOwner_not_ends_with_nocase: String
  currentOwner_: Wallet_filter
  minted: BigInt
  minted_not: BigInt
  minted_gt: BigInt
  minted_lt: BigInt
  minted_gte: BigInt
  minted_lte: BigInt
  minted_in: [BigInt!]
  minted_not_in: [BigInt!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  cities: Int
  cities_not: Int
  cities_gt: Int
  cities_lt: Int
  cities_gte: Int
  cities_lte: Int
  cities_in: [Int!]
  cities_not_in: [Int!]
  harbours: Int
  harbours_not: Int
  harbours_gt: Int
  harbours_lt: Int
  harbours_gte: Int
  harbours_lte: Int
  harbours_in: [Int!]
  harbours_not_in: [Int!]
  rivers: Int
  rivers_not: Int
  rivers_gt: Int
  rivers_lt: Int
  rivers_gte: Int
  rivers_lte: Int
  rivers_in: [Int!]
  rivers_not_in: [Int!]
  regions: Int
  regions_not: Int
  regions_gt: Int
  regions_lt: Int
  regions_gte: Int
  regions_lte: Int
  regions_in: [Int!]
  regions_not_in: [Int!]
  resourceIds: [Int!]
  resourceIds_not: [Int!]
  resourceIds_contains: [Int!]
  resourceIds_contains_nocase: [Int!]
  resourceIds_not_contains: [Int!]
  resourceIds_not_contains_nocase: [Int!]
  resources_: RealmResource_filter
  wonder: String
  wonder_not: String
  wonder_gt: String
  wonder_lt: String
  wonder_gte: String
  wonder_lte: String
  wonder_in: [String!]
  wonder_not_in: [String!]
  wonder_contains: String
  wonder_contains_nocase: String
  wonder_not_contains: String
  wonder_not_contains_nocase: String
  wonder_starts_with: String
  wonder_starts_with_nocase: String
  wonder_not_starts_with: String
  wonder_not_starts_with_nocase: String
  wonder_ends_with: String
  wonder_ends_with_nocase: String
  wonder_not_ends_with: String
  wonder_not_ends_with_nocase: String
  rarityScore: BigDecimal
  rarityScore_not: BigDecimal
  rarityScore_gt: BigDecimal
  rarityScore_lt: BigDecimal
  rarityScore_gte: BigDecimal
  rarityScore_lte: BigDecimal
  rarityScore_in: [BigDecimal!]
  rarityScore_not_in: [BigDecimal!]
  rarityRank: BigInt
  rarityRank_not: BigInt
  rarityRank_gt: BigInt
  rarityRank_lt: BigInt
  rarityRank_gte: BigInt
  rarityRank_lte: BigInt
  rarityRank_in: [BigInt!]
  rarityRank_not_in: [BigInt!]
  order: String
  order_not: String
  order_gt: String
  order_lt: String
  order_gte: String
  order_lte: String
  order_in: [String!]
  order_not_in: [String!]
  order_contains: String
  order_contains_nocase: String
  order_not_contains: String
  order_not_contains_nocase: String
  order_starts_with: String
  order_starts_with_nocase: String
  order_not_starts_with: String
  order_not_starts_with_nocase: String
  order_ends_with: String
  order_ends_with_nocase: String
  order_not_ends_with: String
  order_not_ends_with_nocase: String
  bridgedOwner: String
  bridgedOwner_not: String
  bridgedOwner_gt: String
  bridgedOwner_lt: String
  bridgedOwner_gte: String
  bridgedOwner_lte: String
  bridgedOwner_in: [String!]
  bridgedOwner_not_in: [String!]
  bridgedOwner_contains: String
  bridgedOwner_contains_nocase: String
  bridgedOwner_not_contains: String
  bridgedOwner_not_contains_nocase: String
  bridgedOwner_starts_with: String
  bridgedOwner_starts_with_nocase: String
  bridgedOwner_not_starts_with: String
  bridgedOwner_not_starts_with_nocase: String
  bridgedOwner_ends_with: String
  bridgedOwner_ends_with_nocase: String
  bridgedOwner_not_ends_with: String
  bridgedOwner_not_ends_with_nocase: String
  bridgedOwner_: Wallet_filter
  bridgedV2Owner: String
  bridgedV2Owner_not: String
  bridgedV2Owner_gt: String
  bridgedV2Owner_lt: String
  bridgedV2Owner_gte: String
  bridgedV2Owner_lte: String
  bridgedV2Owner_in: [String!]
  bridgedV2Owner_not_in: [String!]
  bridgedV2Owner_contains: String
  bridgedV2Owner_contains_nocase: String
  bridgedV2Owner_not_contains: String
  bridgedV2Owner_not_contains_nocase: String
  bridgedV2Owner_starts_with: String
  bridgedV2Owner_starts_with_nocase: String
  bridgedV2Owner_not_starts_with: String
  bridgedV2Owner_not_starts_with_nocase: String
  bridgedV2Owner_ends_with: String
  bridgedV2Owner_ends_with_nocase: String
  bridgedV2Owner_not_ends_with: String
  bridgedV2Owner_not_ends_with_nocase: String
  bridgedV2Owner_: Wallet_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Realm_filter]
  or: [Realm_filter]
}

enum Realm_orderBy {
  id
  tokenId
  currentOwner
  currentOwner__id
  currentOwner__address
  currentOwner__realmsHeld
  currentOwner__bridgedRealmsHeld
  currentOwner__bridgedV2RealmsHeld
  currentOwner__totalRealms
  currentOwner__joined
  minted
  name
  cities
  harbours
  rivers
  regions
  resourceIds
  resources
  wonder
  rarityScore
  rarityRank
  order
  bridgedOwner
  bridgedOwner__id
  bridgedOwner__address
  bridgedOwner__realmsHeld
  bridgedOwner__bridgedRealmsHeld
  bridgedOwner__bridgedV2RealmsHeld
  bridgedOwner__totalRealms
  bridgedOwner__joined
  bridgedV2Owner
  bridgedV2Owner__id
  bridgedV2Owner__address
  bridgedV2Owner__realmsHeld
  bridgedV2Owner__bridgedRealmsHeld
  bridgedV2Owner__bridgedV2RealmsHeld
  bridgedV2Owner__totalRealms
  bridgedV2Owner__joined
}

type Resource {
  id: ID!
  name: String
  totalRealms: Int
  realms(skip: Int = 0, first: Int = 100, orderBy: RealmResource_orderBy, orderDirection: OrderDirection, where: RealmResource_filter): [RealmResource!]!
}

enum ResourceName {
  Wood
  Stone
  Coal
  Copper
  Obsidian
  Silver
  Ironwood
  Cold_Iron
  Gold
  Hartwood
  Diamonds
  Sapphire
  Deep_Crystal
  Ruby
  Ignium
  Ethereal_Silica
  True_Ice
  Twilight_Quartz
  Alchemical_Silver
  Adamantine
  Mithral
  Dragonhide
}

input Resource_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  totalRealms: Int
  totalRealms_not: Int
  totalRealms_gt: Int
  totalRealms_lt: Int
  totalRealms_gte: Int
  totalRealms_lte: Int
  totalRealms_in: [Int!]
  totalRealms_not_in: [Int!]
  realms_: RealmResource_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Resource_filter]
  or: [Resource_filter]
}

enum Resource_orderBy {
  id
  name
  totalRealms
  realms
}

type Transfer {
  id: ID!
  realm: Realm
  from: Wallet!
  to: Wallet!
  txHash: Bytes!
  timestamp: BigInt!
}

input Transfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  realm: String
  realm_not: String
  realm_gt: String
  realm_lt: String
  realm_gte: String
  realm_lte: String
  realm_in: [String!]
  realm_not_in: [String!]
  realm_contains: String
  realm_contains_nocase: String
  realm_not_contains: String
  realm_not_contains_nocase: String
  realm_starts_with: String
  realm_starts_with_nocase: String
  realm_not_starts_with: String
  realm_not_starts_with_nocase: String
  realm_ends_with: String
  realm_ends_with_nocase: String
  realm_not_ends_with: String
  realm_not_ends_with_nocase: String
  realm_: Realm_filter
  from: String
  from_not: String
  from_gt: String
  from_lt: String
  from_gte: String
  from_lte: String
  from_in: [String!]
  from_not_in: [String!]
  from_contains: String
  from_contains_nocase: String
  from_not_contains: String
  from_not_contains_nocase: String
  from_starts_with: String
  from_starts_with_nocase: String
  from_not_starts_with: String
  from_not_starts_with_nocase: String
  from_ends_with: String
  from_ends_with_nocase: String
  from_not_ends_with: String
  from_not_ends_with_nocase: String
  from_: Wallet_filter
  to: String
  to_not: String
  to_gt: String
  to_lt: String
  to_gte: String
  to_lte: String
  to_in: [String!]
  to_not_in: [String!]
  to_contains: String
  to_contains_nocase: String
  to_not_contains: String
  to_not_contains_nocase: String
  to_starts_with: String
  to_starts_with_nocase: String
  to_not_starts_with: String
  to_not_starts_with_nocase: String
  to_ends_with: String
  to_ends_with_nocase: String
  to_not_ends_with: String
  to_not_ends_with_nocase: String
  to_: Wallet_filter
  txHash: Bytes
  txHash_not: Bytes
  txHash_gt: Bytes
  txHash_lt: Bytes
  txHash_gte: Bytes
  txHash_lte: Bytes
  txHash_in: [Bytes!]
  txHash_not_in: [Bytes!]
  txHash_contains: Bytes
  txHash_not_contains: Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Transfer_filter]
  or: [Transfer_filter]
}

enum Transfer_orderBy {
  id
  realm
  realm__id
  realm__tokenId
  realm__minted
  realm__name
  realm__cities
  realm__harbours
  realm__rivers
  realm__regions
  realm__wonder
  realm__rarityScore
  realm__rarityRank
  realm__order
  from
  from__id
  from__address
  from__realmsHeld
  from__bridgedRealmsHeld
  from__bridgedV2RealmsHeld
  from__totalRealms
  from__joined
  to
  to__id
  to__address
  to__realmsHeld
  to__bridgedRealmsHeld
  to__bridgedV2RealmsHeld
  to__totalRealms
  to__joined
  txHash
  timestamp
}

type Wallet {
  id: ID!
  address: Bytes!
  realms(skip: Int = 0, first: Int = 100, orderBy: Realm_orderBy, orderDirection: OrderDirection, where: Realm_filter): [Realm!]
  realmsHeld: BigInt!
  bridgedRealmsHeld: BigInt!
  bridgedV2RealmsHeld: BigInt!
  totalRealms: BigInt!
  joined: BigInt!
}

input Wallet_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  address: Bytes
  address_not: Bytes
  address_gt: Bytes
  address_lt: Bytes
  address_gte: Bytes
  address_lte: Bytes
  address_in: [Bytes!]
  address_not_in: [Bytes!]
  address_contains: Bytes
  address_not_contains: Bytes
  realms_: Realm_filter
  realmsHeld: BigInt
  realmsHeld_not: BigInt
  realmsHeld_gt: BigInt
  realmsHeld_lt: BigInt
  realmsHeld_gte: BigInt
  realmsHeld_lte: BigInt
  realmsHeld_in: [BigInt!]
  realmsHeld_not_in: [BigInt!]
  bridgedRealmsHeld: BigInt
  bridgedRealmsHeld_not: BigInt
  bridgedRealmsHeld_gt: BigInt
  bridgedRealmsHeld_lt: BigInt
  bridgedRealmsHeld_gte: BigInt
  bridgedRealmsHeld_lte: BigInt
  bridgedRealmsHeld_in: [BigInt!]
  bridgedRealmsHeld_not_in: [BigInt!]
  bridgedV2RealmsHeld: BigInt
  bridgedV2RealmsHeld_not: BigInt
  bridgedV2RealmsHeld_gt: BigInt
  bridgedV2RealmsHeld_lt: BigInt
  bridgedV2RealmsHeld_gte: BigInt
  bridgedV2RealmsHeld_lte: BigInt
  bridgedV2RealmsHeld_in: [BigInt!]
  bridgedV2RealmsHeld_not_in: [BigInt!]
  totalRealms: BigInt
  totalRealms_not: BigInt
  totalRealms_gt: BigInt
  totalRealms_lt: BigInt
  totalRealms_gte: BigInt
  totalRealms_lte: BigInt
  totalRealms_in: [BigInt!]
  totalRealms_not_in: [BigInt!]
  joined: BigInt
  joined_not: BigInt
  joined_gt: BigInt
  joined_lt: BigInt
  joined_gte: BigInt
  joined_lte: BigInt
  joined_in: [BigInt!]
  joined_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Wallet_filter]
  or: [Wallet_filter]
}

enum Wallet_orderBy {
  id
  address
  realms
  realmsHeld
  bridgedRealmsHeld
  bridgedV2RealmsHeld
  totalRealms
  joined
}